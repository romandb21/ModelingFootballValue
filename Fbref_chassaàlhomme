import requests
from bs4 import BeautifulSoup
import pandas as pd
import time
import os
import random
import json
import io

# Scraping configuration
CONFIG_FILE = 'scraping_progress.json'

def save_progress(data):
    """Save scraping progress to a JSON file, including the season."""
    with open(CONFIG_FILE, 'w') as f:
        json.dump(data, f)



def load_progress():
    """Load previous scraping progress"""
    try:
        with open(CONFIG_FILE, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {'season': None, 'last_club': None, 'last_player': None}



def get_club_urls(league_url, season):
    """Get URLs for all clubs in the league for a specific season"""
    HEADERS = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    response = requests.get(league_url, headers=HEADERS)
    soup = BeautifulSoup(response.text, 'html.parser')

    # Replace dynamic ID based on the season
    table_id = f"results{season}131_overall"
    clubs_table = soup.find("table", id=table_id)
    
    if not clubs_table:
        raise ValueError(f"Could not find the clubs table with ID: {table_id}")

    club_links = []
    for row in clubs_table.find_all("tr"):
        first_col = row.find("td", {"data-stat": "team"})
        if first_col and first_col.find("a"):
            link0 = "https://fbref.com" + first_col.find("a")["href"]
            parts = link0.split('/')
            parts.insert(6, season)  # Insert the dynamic season
            link_transformed = "/".join(parts)
            club_links.append(link_transformed)
    
    return club_links


def scrape_club_players(club_url):
    """Get player links for a specific club"""
    HEADERS = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    time.sleep(random.uniform(3, 4))  # random delay 
    
    response = requests.get(club_url, headers=HEADERS)
    soup = BeautifulSoup(response.text, 'html.parser')
    
    players_table = soup.find("table", id="stats_standard_13")
    
    if not players_table:
        print(f"Warning: no players table for {club_url} ")
        return []

    player_links = []
    for row in players_table.find_all("tr"):
        player_cell = row.find("th", {"data-stat": "player"})
        if player_cell and player_cell.find("a"):
            player_link = player_cell.find("a")["href"]
            
            # Build complete URL
            linkbefore = "https://fbref.com" + player_link
            linkmid = linkbefore.split("/")
            linkmid.insert(6, "all_comps")
            full_url = "/".join(linkmid) + "-Stats---All-Competitions"
            
            player_links.append(full_url)
    
    return player_links


def scrape_stats_player(player_url, existing_players):
    """Get statistics for a specific player if not already in the dataset."""
    player_name = player_url.split("/")[-1].replace("-Stats---All-Competitions", "").replace("-", " ")

    if player_name in existing_players:
        print(f"Skipping {player_name} (already exists in the dataset).")
        return pd.DataFrame()

    HEADERS = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    time.sleep(random.uniform(3, 4)) # random delay

    try:
        response = requests.get(player_url, headers=HEADERS)
        soup = BeautifulSoup(response.text, 'html.parser')
        stats_table = soup.find("table", id="stats_standard_expanded")
        
        if stats_table is None:
            stats_table = soup.find("table", id="stats_standard_dom_lg")
            
        if stats_table is None:
            print(f"No stats table found for URL: {player_url}")
            return pd.DataFrame()

        # Convertir le tableau HTML en DataFrame
        try:
            stats_table_html = str(stats_table)  # Convertir en chaîne
            stats_table = pd.read_html(io.StringIO(stats_table_html), header=[0, 1])[0]
        except ValueError as e:
            print(f"Error reading HTML table for {player_name}: {e}")
            return pd.DataFrame()

        '''seasons_to_keep = [
            '2010-2011', '2011-2012', '2012-2013', '2013-2014', 
            '2014-2015', '2015-2016', '2016-2017', '2017-2018', 
            '2018-2019', '2019-2020', '2020-2021', '2021-2022', 
            '2022-2023', '2023-2024', '2024-2025'
        ]
        stats_table = stats_table[stats_table[('Unnamed: 0_level_0', 'Season')].isin(seasons_to_keep)]'''


        # Créer une copie explicite pour éviter le SettingWithCopyWarning
        stats_table = stats_table.copy()

        # Ajouter le nom du joueur
        stats_table.loc[:, ('Unnamed: -1_level_0', 'Player')] = player_name

        # Reorder columns for consistency
        new_order = [('Unnamed: -1_level_0', 'Player')] + list(stats_table.columns[:-1])
        stats_table = stats_table[new_order]

        return stats_table
    except Exception as e:
        print(f"Error scraping stats for {player_name}: {e}")
        return pd.DataFrame()



file_path1 = "/home/onyxia/work/ModelingFootballValue/players_stats_L1.csv"
file_path2 = "/home/onyxia/work/ModelingFootballValue/players_stats_liga.csv"
file_path3 = "/home/onyxia/work/ModelingFootballValue/players_stats_bundes.csv"
file_path4 = "/home/onyxia/work/ModelingFootballValue/players_stats_PL.csv"
file_path5 = "/home/onyxia/work/ModelingFootballValue/players_stats_serieA.csv"

try:
    existing_data1 = pd.read_csv(file_path1, header=[0, 1], low_memory=False)
    existing_data2 = pd.read_csv(file_path2, header=[0, 1], low_memory=False)
    existing_data3 = pd.read_csv(file_path3, header=[0, 1], low_memory=False)
    existing_data4 = pd.read_csv(file_path4, header=[0, 1], low_memory=False)
    existing_data5 = pd.read_csv(file_path5, header=[0, 1], low_memory=False)
    existing_data = pd.concat([existing_data1, existing_data2, existing_data3, existing_data4, existing_data5], ignore_index=True)
    existing_players = set(existing_data[('Unnamed: -1_level_0', 'Player')].unique())
except FileNotFoundError:
    existing_data = pd.DataFrame()
    existing_players = set()
    
club_url = "https://fbref.com/en/squads/e2d8892c/Paris-Saint-Germain-Stats"
all_players_stats = pd.DataFrame()
    
for player_url in scrape_club_players(club_url):
    player_stats = scrape_stats_player(player_url, existing_players)
    if not player_stats.empty:
        all_players_stats = pd.concat([all_players_stats, player_stats], ignore_index=True)
                


def rename_columns(df):
    new_columns = []
    for col in df.columns:
        # Si le niveau supérieur commence par "Unnamed", on garde uniquement le niveau inférieur
        if str(col[0]).startswith("Unnamed"):
            new_columns.append(col[1])
        else:
            # Sinon, on combine le niveau supérieur et le niveau inférieur avec ":"
            new_columns.append(f"{col[0]} : {col[1]}")
    
    # Appliquer les nouveaux noms de colonnes
    df.columns = new_columns
    return df

# Exemple d'utilisation
table_renamed = rename_columns(all_players_stats)

df1 = pd.read_csv("/home/onyxia/work/ModelingFootballValue/players_stats_Big5.csv")
df2 = table_renamed


# Supprimer les colonnes dupliquées (optionnel)
df1 = df1.loc[:, ~df1.columns.duplicated()]
df2 = df2.loc[:, ~df2.columns.duplicated()]



# Concaténation après traitement
concatenation = pd.concat([df1, df2], axis=0, join='outer', ignore_index=True)
concatenation = concatenation.drop_duplicates(subset=['Player', 'Season'])
print(concatenation[concatenation['Player']=='Achraf Hakimi'])
concatenation.to_csv("/home/onyxia/work/ModelingFootballValue/players_stats_Big5.csv", index=False)
